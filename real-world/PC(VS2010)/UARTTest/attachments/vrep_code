-- if you wish to execute code contained in an external file instead,
-- use the require-directive, e.g.:
--
-- require 'myExternalFile'
--
-- Above will look for <V-REP executable path>/myExternalFile.lua or
-- <V-REP executable path>/lua/myExternalFile.lua
-- (the file can be opened in this editor with the popup menu over
-- the file name)

function sysCall_threadmain()
    -- Put some initialization code here
    drone=sim.getObjectHandle("Quadricopter_target")
    base = sim.getObjectHandle("Quadricopter_base")
    bob = sim.getObjectHandle("Sphere")
    local pos_b = sim.getObjectPosition(base, -1)

    v = -0.02
    rev = 0
    t = sim.getSimulationTime()
    while true do
        pos = sim.getObjectPosition(drone, -1)
        t2 = sim.getSimulationTime()
        pos[1] = pos[1]+ v*(sim.getSimulationTime())
        if (rev == 1) then
            v = 0.02
        elseif (rev ==0) then
            v = -0.02
        end
        
        rev = sim.getIntegerSignal('rev')
        angles = sim.getObjectOrientation(bob, -1)
        vel2 = sim.getObjectVelocity(drone, -1)
        pos_b=sim.getObjectPosition(bob,base)
        pos_base=sim.getObjectPosition(base, -1)
        sim.setObjectPosition(drone,-1,pos)
        sim.setFloatSignal('vel_x',vel2[1])
        sim.setFloatSignal('velocity',v)
        sim.setFloatSignal('gamma', angles[1]*57.2958)
        sim.setFloatSignal('pos_b_x',pos_b[1])
        sim.setFloatSignal('pos_b_z',pos_b[3])
        sim.setFloatSignal('pos_x',pos_base[1])
        sim.setFloatSignal('pos_y',pos_base[2])
        sim.addStatusbarMessage(rev)
        sim.switchThread()
        
    end


    -- Put your main loop here, e.g.:
    --
    -- while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
    --     local p=sim.getObjectPosition(objHandle,-1)
    --     p[1]=p[1]+0.001
    --     sim.setObjectPosition(objHandle,-1,p)
    --     sim.switchThread() -- resume in next simulation step
    -- end
end

function sysCall_cleanup()
    -- Put some clean-up code here
end


-- ADDITIONAL DETAILS:
-- -------------------------------------------------------------------------
-- If you wish to synchronize a threaded loop with each simulation pass,
-- enable the explicit thread switching with 
--
-- sim.setThreadAutomaticSwitch(false)
--
-- then use
--
-- sim.switchThread()
--
-- When you want to resume execution in next simulation step (i.e. at t=t+dt)
--
-- sim.switchThread() can also be used normally, in order to not waste too much
-- computation time in a given simulation step
-- -------------------------------------------------------------------------
